// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hospitalapp.Models;

#nullable disable

namespace hospitalapp.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cover", b =>
                {
                    b.Property<int>("BillingId")
                        .HasColumnType("int")
                        .HasColumnName("BillingID");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.HasKey("BillingId", "InsuranceId")
                        .HasName("PK__COVER__A6275CAFC971B6B7");

                    b.HasIndex("InsuranceId");

                    b.ToTable("COVER", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UsedInSurgery", b =>
                {
                    b.Property<int>("SurgeryId")
                        .HasColumnType("int")
                        .HasColumnName("SurgeryID");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("EquipmentID");

                    b.HasKey("SurgeryId", "EquipmentId")
                        .HasName("PK__USED_IN___8BE92184ADDBBF14");

                    b.HasIndex("EquipmentId");

                    b.ToTable("USED_IN_SURGERY", (string)null);
                });

            modelBuilder.Entity("UsedInTest", b =>
                {
                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("EquipmentID");

                    b.HasKey("TestId", "EquipmentId")
                        .HasName("PK__USED_IN___0F8745592BCE5257");

                    b.HasIndex("EquipmentId");

                    b.ToTable("USED_IN_TEST", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Allergy", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<string>("Allergy1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Allergy");

                    b.HasKey("RecordId", "Allergy1")
                        .HasName("PK__ALLERGY__0AE675BD31AABFA7");

                    b.ToTable("ALLERGY", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.AssignBed", b =>
                {
                    b.Property<int>("BedNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("BedNumber", "RoomId")
                        .HasName("PK_ASSIGN_BED_Bed_Room");

                    b.HasIndex("PatientId");

                    b.ToTable("ASSIGN_BED", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.AssignDoctor", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.HasKey("RecordId")
                        .HasName("PK__ASSIGN_D__FBDF78C9C6C560E8");

                    b.HasIndex("DoctorId");

                    b.ToTable("ASSIGN_DOCTOR", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.AssignNurse", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("NurseID");

                    b.HasKey("RecordId")
                        .HasName("PK__ASSIGN_N__FBDF78C9270F944F");

                    b.HasIndex("NurseId");

                    b.ToTable("ASSIGN_NURSE", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Bed", b =>
                {
                    b.Property<int>("BedNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.HasKey("BedNumber", "RoomId")
                        .HasName("PK__BED__BFABAEC5589D7873");

                    b.HasIndex("RoomId");

                    b.ToTable("BED", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Billing", b =>
                {
                    b.Property<int>("BillingId")
                        .HasColumnType("int")
                        .HasColumnName("BillingID");

                    b.Property<decimal?>("CoverAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateOnly?>("DateIssued")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("InitialAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("StatusBill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeBill")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BillingId")
                        .HasName("PK__BILLING__F1656D13D0BD0732");

                    b.ToTable("BILLING", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.BillingCalculation", b =>
                {
                    b.Property<decimal>("InitialAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CoverAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("InitialAmount", "CoverAmount")
                        .HasName("PK__BILLING___F8197FB174D019F0");

                    b.ToTable("BILLING_CALCULATION", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Department", b =>
                {
                    b.Property<int>("DepartmentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentNumber"));

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ManageId")
                        .HasColumnType("int")
                        .HasColumnName("ManageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DepartmentNumber")
                        .HasName("PK__DEPARTME__718447F81FD8E035");

                    b.HasIndex("ManageId");

                    b.ToTable("DEPARTMENT", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.DiagnosticTest", b =>
                {
                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<DateOnly>("TestDate")
                        .HasColumnType("date");

                    b.Property<string>("TestDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TestResult")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TestId")
                        .HasName("PK__DIAGNOST__8CC33100531104A7");

                    b.ToTable("DIAGNOSTIC_TEST", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Certifica")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DoctorId")
                        .HasName("PK__DOCTOR__2DC00EDF45866AF2");

                    b.ToTable("DOCTOR", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Degree")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Job_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.HasKey("EmployeeId")
                        .HasName("PK__EMPLOYEE__7AD04FF192D17CCB");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__EMPLOYEE__85FB4E38F160F089")
                        .IsUnique();

                    b.ToTable("EMPLOYEE", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("EquipmentID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EquipmentId")
                        .HasName("PK__EQUIPMEN__344745998B314AC3");

                    b.ToTable("EQUIPMENT", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.HaveInsurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("InsuranceId")
                        .HasName("PK__HAVE_INS__74231BC4B278FD52");

                    b.HasIndex("PatientId");

                    b.ToTable("HAVE_INSURANCE", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Insurance", b =>
                {
                    b.Property<int>("InsuranceId")
                        .HasColumnType("int")
                        .HasColumnName("InsuranceID");

                    b.Property<decimal?>("CoverLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("CoverPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("InsurancePriority")
                        .HasColumnType("int");

                    b.Property<string>("PolicyNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Provider")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StatusInsurance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("InsuranceId")
                        .HasName("PK__INSURANC__74231BC4386E2AC0");

                    b.ToTable("INSURANCE", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Maintain", b =>
                {
                    b.Property<int>("TechId")
                        .HasColumnType("int")
                        .HasColumnName("TechID");

                    b.Property<int>("EquipId")
                        .HasColumnType("int")
                        .HasColumnName("EquipID");

                    b.Property<DateOnly>("DateMaintain")
                        .HasColumnType("date");

                    b.Property<string>("TypeMaintain")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TechId", "EquipId")
                        .HasName("PK__MAINTAIN__0FF29AAEC6803016");

                    b.HasIndex("EquipId");

                    b.ToTable("MAINTAIN", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.MedicalHistory", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DescriptionDetail")
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Treatment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RecordId", "TypeName")
                        .HasName("PK__MEDICAL___7691053354195B28");

                    b.ToTable("MEDICAL_HISTORY", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Nurse", b =>
                {
                    b.Property<int>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("NurseID");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("NurseId")
                        .HasName("PK__NURSE__4384786957658202");

                    b.ToTable("NURSE", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.OtherEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EmployeeId")
                        .HasName("PK__OTHER_EM__7AD04FF189F72C32");

                    b.ToTable("OTHER_EMPLOYEE", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.PatientRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CurrentMedication")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmerContactInfo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RecordId")
                        .HasName("PK__PATIENT___FBDF78C9D7BF653D");

                    b.ToTable("PATIENT_RECORD", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Payment", b =>
                {
                    b.Property<int>("ReceiptId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiptID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("BillingId")
                        .HasColumnType("int")
                        .HasColumnName("BillingID");

                    b.Property<DateOnly?>("DatePay")
                        .HasColumnType("date");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ReceiptId")
                        .HasName("PK__PAYMENT__CC08C400A8DE2AF1");

                    b.HasIndex("BillingId");

                    b.ToTable("PAYMENT", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.PerformSurgery", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int")
                        .HasColumnName("SurgeryID");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.HasKey("RecordId", "SurgeryId", "DoctorId")
                        .HasName("PK__PERFORM___E5786D9A2C72412A");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("PERFORM_SURGERY", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.PerformTest", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<int>("NurseId")
                        .HasColumnType("int")
                        .HasColumnName("NurseID");

                    b.HasKey("RecordId", "TestId", "NurseId")
                        .HasName("PK__PERFORM___8B50CFA17720B3A3");

                    b.HasIndex("NurseId");

                    b.HasIndex("TestId");

                    b.ToTable("PERFORM_TEST", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasColumnName("RoomID");

                    b.Property<int?>("Dno")
                        .HasColumnType("int");

                    b.Property<string>("StatusRoom")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeRoom")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoomId")
                        .HasName("PK__ROOM__32863919548AC209");

                    b.HasIndex("Dno");

                    b.ToTable("ROOM", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Surgery", b =>
                {
                    b.Property<int>("SurgeryId")
                        .HasColumnType("int")
                        .HasColumnName("SurgeryID");

                    b.Property<string>("Complication")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("DateSurgery")
                        .HasColumnType("date");

                    b.Property<string>("Outcome")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeSurgery")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SurgeryId")
                        .HasName("PK__SURGERY__08AD55DD0260492A");

                    b.ToTable("SURGERY", (string)null);
                });

            modelBuilder.Entity("hospitalapp.Models.Technician", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EmployeeId")
                        .HasName("PK__TECHNICI__7AD04FF1C4BB4C20");

                    b.ToTable("TECHNICIAN", (string)null);
                });

            modelBuilder.Entity("Cover", b =>
                {
                    b.HasOne("hospitalapp.Models.Billing", null)
                        .WithMany()
                        .HasForeignKey("BillingId")
                        .IsRequired()
                        .HasConstraintName("FK__COVER__BillingID__1EA48E88");

                    b.HasOne("hospitalapp.Models.Insurance", null)
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK__COVER__Insurance__1F98B2C1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsedInSurgery", b =>
                {
                    b.HasOne("hospitalapp.Models.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK__USED_IN_S__Equip__71D1E811");

                    b.HasOne("hospitalapp.Models.Surgery", null)
                        .WithMany()
                        .HasForeignKey("SurgeryId")
                        .IsRequired()
                        .HasConstraintName("FK__USED_IN_S__Surge__70DDC3D8");
                });

            modelBuilder.Entity("UsedInTest", b =>
                {
                    b.HasOne("hospitalapp.Models.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .IsRequired()
                        .HasConstraintName("FK__USED_IN_T__Equip__778AC167");

                    b.HasOne("hospitalapp.Models.DiagnosticTest", null)
                        .WithMany()
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__USED_IN_T__TestI__76969D2E");
                });

            modelBuilder.Entity("hospitalapp.Models.Allergy", b =>
                {
                    b.HasOne("hospitalapp.Models.PatientRecord", "Record")
                        .WithMany("Allergies")
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__ALLERGY__RecordI__114A936A");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("hospitalapp.Models.AssignBed", b =>
                {
                    b.HasOne("hospitalapp.Models.PatientRecord", "Patient")
                        .WithMany("AssignBeds")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__ASSIGN_BE__Patie__0D7A0286");

                    b.HasOne("hospitalapp.Models.Bed", "Bed")
                        .WithOne("AssignBed")
                        .HasForeignKey("hospitalapp.Models.AssignBed", "BedNumber", "RoomId")
                        .IsRequired()
                        .HasConstraintName("FK__ASSIGN_BED__0E6E26BF");

                    b.Navigation("Bed");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("hospitalapp.Models.AssignDoctor", b =>
                {
                    b.HasOne("hospitalapp.Models.Doctor", "Doctor")
                        .WithMany("AssignDoctors")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK__ASSIGN_DO__Docto__00200768");

                    b.HasOne("hospitalapp.Models.PatientRecord", "Record")
                        .WithOne("AssignDoctor")
                        .HasForeignKey("hospitalapp.Models.AssignDoctor", "RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__ASSIGN_DO__Recor__01142BA1");

                    b.Navigation("Doctor");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("hospitalapp.Models.AssignNurse", b =>
                {
                    b.HasOne("hospitalapp.Models.Nurse", "Nurse")
                        .WithMany("AssignNurses")
                        .HasForeignKey("NurseId")
                        .HasConstraintName("FK__ASSIGN_NU__Nurse__7C4F7684");

                    b.HasOne("hospitalapp.Models.PatientRecord", "Record")
                        .WithOne("AssignNurse")
                        .HasForeignKey("hospitalapp.Models.AssignNurse", "RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__ASSIGN_NU__Recor__7D439ABD");

                    b.Navigation("Nurse");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("hospitalapp.Models.Bed", b =>
                {
                    b.HasOne("hospitalapp.Models.Room", "Room")
                        .WithMany("Beds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bed_Room");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("hospitalapp.Models.Department", b =>
                {
                    b.HasOne("hospitalapp.Models.Employee", "Manage")
                        .WithMany("Departments")
                        .HasForeignKey("ManageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Department_ManageID");

                    b.Navigation("Manage");
                });

            modelBuilder.Entity("hospitalapp.Models.Doctor", b =>
                {
                    b.HasOne("hospitalapp.Models.Employee", "DoctorNavigation")
                        .WithOne("Doctor")
                        .HasForeignKey("hospitalapp.Models.Doctor", "DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_Employee");

                    b.Navigation("DoctorNavigation");
                });

            modelBuilder.Entity("hospitalapp.Models.Employee", b =>
                {
                    b.HasOne("hospitalapp.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Employee_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("hospitalapp.Models.HaveInsurance", b =>
                {
                    b.HasOne("hospitalapp.Models.Insurance", "Insurance")
                        .WithOne("HaveInsurance")
                        .HasForeignKey("hospitalapp.Models.HaveInsurance", "InsuranceId")
                        .IsRequired()
                        .HasConstraintName("FK__HAVE_INSU__Insur__1AD3FDA4");

                    b.HasOne("hospitalapp.Models.PatientRecord", "Patient")
                        .WithMany("HaveInsurances")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK__HAVE_INSU__Patie__1BC821DD");

                    b.Navigation("Insurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("hospitalapp.Models.Maintain", b =>
                {
                    b.HasOne("hospitalapp.Models.Equipment", "Equip")
                        .WithMany("Maintains")
                        .HasForeignKey("EquipId")
                        .IsRequired()
                        .HasConstraintName("FK__MAINTAIN__EquipI__6E01572D");

                    b.HasOne("hospitalapp.Models.Technician", "Tech")
                        .WithMany("Maintains")
                        .HasForeignKey("TechId")
                        .IsRequired()
                        .HasConstraintName("FK__MAINTAIN__TechID__6D0D32F4");

                    b.Navigation("Equip");

                    b.Navigation("Tech");
                });

            modelBuilder.Entity("hospitalapp.Models.MedicalHistory", b =>
                {
                    b.HasOne("hospitalapp.Models.PatientRecord", "Record")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__MEDICAL_H__Recor__14270015");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("hospitalapp.Models.Nurse", b =>
                {
                    b.HasOne("hospitalapp.Models.Employee", "NurseNavigation")
                        .WithOne("Nurse")
                        .HasForeignKey("hospitalapp.Models.Nurse", "NurseId")
                        .IsRequired()
                        .HasConstraintName("FK_Nurse_Employee");

                    b.Navigation("NurseNavigation");
                });

            modelBuilder.Entity("hospitalapp.Models.OtherEmployee", b =>
                {
                    b.HasOne("hospitalapp.Models.Employee", "Employee")
                        .WithOne("OtherEmployee")
                        .HasForeignKey("hospitalapp.Models.OtherEmployee", "EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__OTHER_EMP__Emplo__25518C17");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hospitalapp.Models.Payment", b =>
                {
                    b.HasOne("hospitalapp.Models.Billing", "Billing")
                        .WithMany("Payments")
                        .HasForeignKey("BillingId")
                        .HasConstraintName("FK__PAYMENT__Billing__22751F6C");

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("hospitalapp.Models.PerformSurgery", b =>
                {
                    b.HasOne("hospitalapp.Models.Doctor", "Doctor")
                        .WithMany("PerformSurgeries")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK__PERFORM_S__Docto__05D8E0BE");

                    b.HasOne("hospitalapp.Models.PatientRecord", "Record")
                        .WithMany("PerformSurgeries")
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__PERFORM_S__Recor__03F0984C");

                    b.HasOne("hospitalapp.Models.Surgery", "Surgery")
                        .WithMany("PerformSurgeries")
                        .HasForeignKey("SurgeryId")
                        .IsRequired()
                        .HasConstraintName("FK__PERFORM_S__Surge__04E4BC85");

                    b.Navigation("Doctor");

                    b.Navigation("Record");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("hospitalapp.Models.PerformTest", b =>
                {
                    b.HasOne("hospitalapp.Models.Nurse", "Nurse")
                        .WithMany("PerformTests")
                        .HasForeignKey("NurseId")
                        .IsRequired()
                        .HasConstraintName("FK__PERFORM_T__Nurse__0A9D95DB");

                    b.HasOne("hospitalapp.Models.PatientRecord", "Record")
                        .WithMany("PerformTests")
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__PERFORM_T__Recor__08B54D69");

                    b.HasOne("hospitalapp.Models.DiagnosticTest", "Test")
                        .WithMany("PerformTests")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__PERFORM_T__TestI__09A971A2");

                    b.Navigation("Nurse");

                    b.Navigation("Record");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("hospitalapp.Models.Room", b =>
                {
                    b.HasOne("hospitalapp.Models.Department", "DnoNavigation")
                        .WithMany("Rooms")
                        .HasForeignKey("Dno")
                        .HasConstraintName("FK_Room_Department");

                    b.Navigation("DnoNavigation");
                });

            modelBuilder.Entity("hospitalapp.Models.Technician", b =>
                {
                    b.HasOne("hospitalapp.Models.Employee", "Employee")
                        .WithOne("Technician")
                        .HasForeignKey("hospitalapp.Models.Technician", "EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Technician_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hospitalapp.Models.Bed", b =>
                {
                    b.Navigation("AssignBed");
                });

            modelBuilder.Entity("hospitalapp.Models.Billing", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("hospitalapp.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("hospitalapp.Models.DiagnosticTest", b =>
                {
                    b.Navigation("PerformTests");
                });

            modelBuilder.Entity("hospitalapp.Models.Doctor", b =>
                {
                    b.Navigation("AssignDoctors");

                    b.Navigation("PerformSurgeries");
                });

            modelBuilder.Entity("hospitalapp.Models.Employee", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");

                    b.Navigation("OtherEmployee");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("hospitalapp.Models.Equipment", b =>
                {
                    b.Navigation("Maintains");
                });

            modelBuilder.Entity("hospitalapp.Models.Insurance", b =>
                {
                    b.Navigation("HaveInsurance");
                });

            modelBuilder.Entity("hospitalapp.Models.Nurse", b =>
                {
                    b.Navigation("AssignNurses");

                    b.Navigation("PerformTests");
                });

            modelBuilder.Entity("hospitalapp.Models.PatientRecord", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("AssignBeds");

                    b.Navigation("AssignDoctor");

                    b.Navigation("AssignNurse");

                    b.Navigation("HaveInsurances");

                    b.Navigation("MedicalHistories");

                    b.Navigation("PerformSurgeries");

                    b.Navigation("PerformTests");
                });

            modelBuilder.Entity("hospitalapp.Models.Room", b =>
                {
                    b.Navigation("Beds");
                });

            modelBuilder.Entity("hospitalapp.Models.Surgery", b =>
                {
                    b.Navigation("PerformSurgeries");
                });

            modelBuilder.Entity("hospitalapp.Models.Technician", b =>
                {
                    b.Navigation("Maintains");
                });
#pragma warning restore 612, 618
        }
    }
}
